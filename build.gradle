group 'com.teksystemsgs'
version '0.0.1-SNAPSHOT'

apply plugin: 'java'

sourceCompatibility = 1.8
version = '1.0'

repositories {
    mavenCentral()
}

dependencies {
    compile 'ch.qos.logback:logback-core:1.2.3'
    compile 'ch.qos.logback:logback-classic:1.2.3'
    compile 'org.slf4j:slf4j-api:1.7.25'
    compile 'org.testng:testng:6.8.21'
    compile 'org.seleniumhq.selenium:selenium-java:2.47.1'
    compile 'org.jboss.resteasy:resteasy-jaxrs:3.1.1.Final'
    compile 'org.jboss.resteasy:resteasy-client:3.1.1.Final'
    compile files('./src/main/resources/validator4test-0.0.1.jar')
    compile files('./src/main/resources/uinavigator-1.0.jar')
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.1'
}

test {
}

task debug(type: Test) {
    systemProperties['env'] = System.properties["env"]
    maxParallelForks = 4

    def groupsToInclude = []
    def groupsToExclude = []

    groupsToInclude.add('under_development')
    useTestNG() {
        groupsToInclude.each { String group -> includeGroups group }
        groupsToExclude.each { String group -> excludeGroups group }
    }
}
debug.description = "Tests under development or being debugged"

task evt(type: Test) {
    description = "Environment Validation"
    systemProperties['env'] = System.properties["env"]
    maxParallelForks = 4

    def groupsToInclude = []
    def groupsToExclude = []

    groupsToInclude.add('evt')
    useTestNG() {
        groupsToInclude.each { String group -> includeGroups group }
        groupsToExclude.each { String group -> excludeGroups group }
    }
}

task bvt(type: Test) {
    description = "EVT and DEBUG tests"
    systemProperties['env'] = System.properties["env"]
    maxParallelForks = 4

    def groupsToInclude = []
    def groupsToExclude = []

    groupsToInclude.add('under_development')
    groupsToInclude.add('evt')
    useTestNG() {
        groupsToInclude.each { String group -> includeGroups group }
        groupsToExclude.each { String group -> excludeGroups group }
    }
}

task sprint(type: Test) {
    description = "Sprint validation"
    systemProperties['env'] = System.properties["env"]
    maxParallelForks = 4

    def groupsToInclude = []
    def groupsToExclude = []

    groupsToInclude.add('sprint')
    useTestNG() {
        groupsToInclude.each { String group -> includeGroups group }
        groupsToExclude.each { String group -> excludeGroups group }
    }
}

task release(type: Test) {
    description = "Release validation"
    systemProperties['env'] = System.properties["env"]
    maxParallelForks = 4

    def groupsToInclude = []
    def groupsToExclude = []

    groupsToInclude.add('release')
    useTestNG() {
        groupsToInclude.each { String group -> includeGroups group }
        groupsToExclude.each { String group -> excludeGroups group }
    }
}

task production(type: Test) {
    description = "Production validation (non-destructive)"
    systemProperties['env'] = System.properties["env"]
    maxParallelForks = 4

    def groupsToInclude = []
    def groupsToExclude = []

    groupsToInclude.add('production')
    useTestNG() {
        groupsToInclude.each { String group -> includeGroups group }
        groupsToExclude.each { String group -> excludeGroups group }
    }
}

task regression(type: Test) {
    description = "All tests"
    systemProperties['env'] = System.properties["env"]
    maxParallelForks = 4
    useTestNG()
}
